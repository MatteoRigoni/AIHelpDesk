@page "/admin/upload"
@using AIHelpDesk.Application
@using AIHelpDesk.Application.AI
@using AIHelpDesk.Domain              @* o il namespace dove sta UploadedDocument *@
@using AIHelpDesk.Infrastructure.Model
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject Microsoft.Extensions.Options.IOptions<TenantInfoOptions> TenantInfoOpt

@inject IDocumentService DocumentSvc
@inject HttpClient Http
@inject ISnackbar Snackbar

<div class="aih-admin-root">
    <MudContainer MaxWidth="MaxWidth.Large" Class="aih-admin-main py-10">

        @* — UPLOAD SECTION — *@
        @if (_isUploading)
        {
            <MudProgressLinear Indeterminate="true"
                               Color="Color.Primary"
                               Class="mb-6" />
        }

        <MudPaper Elevation="0" Class="p-8 text-center admin-hero-paper mb-6">
            <MudText Typo="Typo.h5" Class="mb-1">Upload Documenti AI</MudText>
            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-4">
                Carica PDF, TXT o CSV (max 5 MB) per indicizzare
            </MudText>

            <MudFileUpload T="IBrowserFile"
                           Context="fileInput"
                           Accept="application/pdf,text/plain,text/csv"
                           MaxFileSize="5242880"
                           FilesChanged="OnFileChanged">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled="_isUploading"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        @_buttonLabel
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudPaper>

        @* — LIST SECTION — *@
        <MudPaper Class="pa-4 mx-auto" MaxWidth="800px">
            <MudText Typo="Typo.h5" Class="mb-4">Documenti Caricati</MudText>
            <MudTable Items="_docs" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>File</MudTh>
                    <MudTh>Data</MudTh>
                    <MudTh>Chunks</MudTh>
                    <MudTh>Stato</MudTh>
                    <MudTh>Azioni</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="File">@context.FileName</MudTd>
                    <MudTd DataLabel="Data">@context.UploadedAt</MudTd>
                    <MudTd DataLabel="Chunks">@context.ChunkCount</MudTd>
                    <MudTd DataLabel="Stato">@context.Status</MudTd>
                    <MudTd DataLabel="Azioni">
                        <MudButton Size="Size.Small"
                                   Variant="Variant.Outlined"
                                   OnClick="()=>Reindex(context.Id)">
                            Re‑Index
                        </MudButton>
                        <MudButton Size="Size.Small"
                                   Color="Color.Error"
                                   Variant="Variant.Outlined"
                                   OnClick="()=>Delete(context.Id)">
                            Elimina
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>

    </MudContainer>
</div>

@code {
    private IBrowserFile fileInput = default!;
    private bool _isUploading;
    private List<UploadedDocument> _docs = new();
    private CancellationTokenSource? _pollingCts;

    private string _buttonLabel => _isUploading ? "Caricamento..." : "Seleziona documento";

    protected override async Task OnInitializedAsync()
    {
        await LoadDocsAsync();
    }

    private async Task LoadDocsAsync()
    {
        _docs = (await DocumentSvc.ListAsync(TenantInfoOpt.Value.TenantName)).ToList();
        StateHasChanged();
    }

    private async Task OnFileChanged(IBrowserFile file)
    {
        _isUploading = true;
        StateHasChanged();

        try
        {
            using var content = new MultipartFormDataContent();
            await using var stream = file.OpenReadStream(5 * 1024 * 1024);
            content.Add(new StreamContent(stream), "file", file.Name);

            var res = await Http.PostAsync("/upload/ai-docs", content);

            if (res.IsSuccessStatusCode)
            {
                Snackbar.Add($"File {file.Name} caricato.", Severity.Success);
                await LoadDocsAsync();
                StartPollingIfPending();
            }
            else
            {
                Snackbar.Add($"Errore upload: {res.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }

    private async Task Reindex(int id)
    {
        await DocumentSvc.ReindexAsync(id);
        Snackbar.Add("Re‑index avviato", Severity.Info);
        await LoadDocsAsync();  
        StartPollingIfPending();
    }

    private async Task Delete(int id)
    {
        await DocumentSvc.DeleteAsync(id);
        Snackbar.Add("Documento eliminato", Severity.Success);
        await LoadDocsAsync();
        // Stop polling if no more pending
        if (!HasPending())
            StopPolling();
    }

    private bool HasPending() => _docs.Any(d => d.Status == "Pending");

    private void StartPollingIfPending()
    {
        if (HasPending())
        {
            StopPolling(); // ensure only one polling
            _pollingCts = new CancellationTokenSource();
            _ = PollPendingAsync(_pollingCts.Token);
        }
    }

    private void StopPolling()
    {
        _pollingCts?.Cancel();
        _pollingCts = null;
    }

    private async Task PollPendingAsync(CancellationToken token)
    {
        try
        {
            while (!token.IsCancellationRequested && HasPending())
            {
                await Task.Delay(3000, token); 
                await LoadDocsAsync();
            }
        }
        catch (TaskCanceledException) { }
        finally
        {
            if (!HasPending())
                StopPolling();
        }
    }
}
